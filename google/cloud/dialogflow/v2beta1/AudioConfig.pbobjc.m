// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/audio_config.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/AudioConfig.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DFAudioConfigRoot

@implementation DFAudioConfigRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DFAudioConfigRoot_FileDescriptor

static GPBFileDescriptor *DFAudioConfigRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                 objcPrefix:@"DF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum DFSsmlVoiceGender

GPBEnumDescriptor *DFSsmlVoiceGender_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SsmlVoiceGenderUnspecified\000SsmlVoiceGend"
        "erMale\000SsmlVoiceGenderFemale\000SsmlVoiceGe"
        "nderNeutral\000";
    static const int32_t values[] = {
        DFSsmlVoiceGender_SsmlVoiceGenderUnspecified,
        DFSsmlVoiceGender_SsmlVoiceGenderMale,
        DFSsmlVoiceGender_SsmlVoiceGenderFemale,
        DFSsmlVoiceGender_SsmlVoiceGenderNeutral,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFSsmlVoiceGender)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFSsmlVoiceGender_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFSsmlVoiceGender_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFSsmlVoiceGender_SsmlVoiceGenderUnspecified:
    case DFSsmlVoiceGender_SsmlVoiceGenderMale:
    case DFSsmlVoiceGender_SsmlVoiceGenderFemale:
    case DFSsmlVoiceGender_SsmlVoiceGenderNeutral:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum DFOutputAudioEncoding

GPBEnumDescriptor *DFOutputAudioEncoding_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OutputAudioEncodingUnspecified\000OutputAud"
        "ioEncodingLinear16\000OutputAudioEncodingMp"
        "3\000OutputAudioEncodingOggOpus\000";
    static const int32_t values[] = {
        DFOutputAudioEncoding_OutputAudioEncodingUnspecified,
        DFOutputAudioEncoding_OutputAudioEncodingLinear16,
        DFOutputAudioEncoding_OutputAudioEncodingMp3,
        DFOutputAudioEncoding_OutputAudioEncodingOggOpus,
    };
    static const char *extraTextFormatInfo = "\001\001f\345\350\346\202\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFOutputAudioEncoding)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFOutputAudioEncoding_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFOutputAudioEncoding_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFOutputAudioEncoding_OutputAudioEncodingUnspecified:
    case DFOutputAudioEncoding_OutputAudioEncodingLinear16:
    case DFOutputAudioEncoding_OutputAudioEncodingMp3:
    case DFOutputAudioEncoding_OutputAudioEncodingOggOpus:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFVoiceSelectionParams

@implementation DFVoiceSelectionParams

@dynamic name;
@dynamic ssmlGender;

typedef struct DFVoiceSelectionParams__storage_ {
  uint32_t _has_storage_[1];
  DFSsmlVoiceGender ssmlGender;
  NSString *name;
} DFVoiceSelectionParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFVoiceSelectionParams_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFVoiceSelectionParams__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ssmlGender",
        .dataTypeSpecific.enumDescFunc = DFSsmlVoiceGender_EnumDescriptor,
        .number = DFVoiceSelectionParams_FieldNumber_SsmlGender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFVoiceSelectionParams__storage_, ssmlGender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFVoiceSelectionParams class]
                                     rootClass:[DFAudioConfigRoot class]
                                          file:DFAudioConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFVoiceSelectionParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFVoiceSelectionParams_SsmlGender_RawValue(DFVoiceSelectionParams *message) {
  GPBDescriptor *descriptor = [DFVoiceSelectionParams descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFVoiceSelectionParams_FieldNumber_SsmlGender];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFVoiceSelectionParams_SsmlGender_RawValue(DFVoiceSelectionParams *message, int32_t value) {
  GPBDescriptor *descriptor = [DFVoiceSelectionParams descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFVoiceSelectionParams_FieldNumber_SsmlGender];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - DFSynthesizeSpeechConfig

@implementation DFSynthesizeSpeechConfig

@dynamic speakingRate;
@dynamic pitch;
@dynamic volumeGainDb;
@dynamic effectsProfileIdArray, effectsProfileIdArray_Count;
@dynamic hasVoice, voice;

typedef struct DFSynthesizeSpeechConfig__storage_ {
  uint32_t _has_storage_[1];
  DFVoiceSelectionParams *voice;
  NSMutableArray *effectsProfileIdArray;
  double speakingRate;
  double pitch;
  double volumeGainDb;
} DFSynthesizeSpeechConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "speakingRate",
        .dataTypeSpecific.className = NULL,
        .number = DFSynthesizeSpeechConfig_FieldNumber_SpeakingRate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFSynthesizeSpeechConfig__storage_, speakingRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "pitch",
        .dataTypeSpecific.className = NULL,
        .number = DFSynthesizeSpeechConfig_FieldNumber_Pitch,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFSynthesizeSpeechConfig__storage_, pitch),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "volumeGainDb",
        .dataTypeSpecific.className = NULL,
        .number = DFSynthesizeSpeechConfig_FieldNumber_VolumeGainDb,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFSynthesizeSpeechConfig__storage_, volumeGainDb),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = GPBStringifySymbol(DFVoiceSelectionParams),
        .number = DFSynthesizeSpeechConfig_FieldNumber_Voice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFSynthesizeSpeechConfig__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectsProfileIdArray",
        .dataTypeSpecific.className = NULL,
        .number = DFSynthesizeSpeechConfig_FieldNumber_EffectsProfileIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFSynthesizeSpeechConfig__storage_, effectsProfileIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFSynthesizeSpeechConfig class]
                                     rootClass:[DFAudioConfigRoot class]
                                          file:DFAudioConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFSynthesizeSpeechConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFOutputAudioConfig

@implementation DFOutputAudioConfig

@dynamic audioEncoding;
@dynamic sampleRateHertz;
@dynamic hasSynthesizeSpeechConfig, synthesizeSpeechConfig;

typedef struct DFOutputAudioConfig__storage_ {
  uint32_t _has_storage_[1];
  DFOutputAudioEncoding audioEncoding;
  int32_t sampleRateHertz;
  DFSynthesizeSpeechConfig *synthesizeSpeechConfig;
} DFOutputAudioConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioEncoding",
        .dataTypeSpecific.enumDescFunc = DFOutputAudioEncoding_EnumDescriptor,
        .number = DFOutputAudioConfig_FieldNumber_AudioEncoding,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFOutputAudioConfig__storage_, audioEncoding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sampleRateHertz",
        .dataTypeSpecific.className = NULL,
        .number = DFOutputAudioConfig_FieldNumber_SampleRateHertz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFOutputAudioConfig__storage_, sampleRateHertz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "synthesizeSpeechConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(DFSynthesizeSpeechConfig),
        .number = DFOutputAudioConfig_FieldNumber_SynthesizeSpeechConfig,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFOutputAudioConfig__storage_, synthesizeSpeechConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFOutputAudioConfig class]
                                     rootClass:[DFAudioConfigRoot class]
                                          file:DFAudioConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFOutputAudioConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFOutputAudioConfig_AudioEncoding_RawValue(DFOutputAudioConfig *message) {
  GPBDescriptor *descriptor = [DFOutputAudioConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFOutputAudioConfig_FieldNumber_AudioEncoding];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFOutputAudioConfig_AudioEncoding_RawValue(DFOutputAudioConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [DFOutputAudioConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFOutputAudioConfig_FieldNumber_AudioEncoding];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

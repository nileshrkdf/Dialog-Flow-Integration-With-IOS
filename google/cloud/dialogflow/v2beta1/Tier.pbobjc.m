// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/tier.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/Tier.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TierRoot

@implementation TierRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TierRoot_FileDescriptor

static GPBFileDescriptor *TierRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Tier

GPBEnumDescriptor *Tier_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TierUnspecified\000TierStandard\000TierEnterpr"
        "ise\000";
    static const int32_t values[] = {
        Tier_TierUnspecified,
        Tier_TierStandard,
        Tier_TierEnterprise,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Tier)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Tier_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Tier_IsValidValue(int32_t value__) {
  switch (value__) {
    case Tier_TierUnspecified:
    case Tier_TierStandard:
    case Tier_TierEnterprise:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AgentTier

@implementation AgentTier

@dynamic tier;

typedef struct AgentTier__storage_ {
  uint32_t _has_storage_[1];
  Tier tier;
} AgentTier__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tier",
        .dataTypeSpecific.enumDescFunc = Tier_EnumDescriptor,
        .number = AgentTier_FieldNumber_Tier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AgentTier__storage_, tier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AgentTier class]
                                     rootClass:[TierRoot class]
                                          file:TierRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AgentTier__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AgentTier_Tier_RawValue(AgentTier *message) {
  GPBDescriptor *descriptor = [AgentTier descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AgentTier_FieldNumber_Tier];
  return GPBGetMessageInt32Field(message, field);
}

void SetAgentTier_Tier_RawValue(AgentTier *message, int32_t value) {
  GPBDescriptor *descriptor = [AgentTier descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AgentTier_FieldNumber_Tier];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetAgentTierRequest

@implementation GetAgentTierRequest

@dynamic name;

typedef struct GetAgentTierRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} GetAgentTierRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GetAgentTierRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAgentTierRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAgentTierRequest class]
                                     rootClass:[TierRoot class]
                                          file:TierRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAgentTierRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateAgentTierRequest

@implementation UpdateAgentTierRequest

@dynamic name;
@dynamic hasAgentTier, agentTier;
@dynamic hasUpdateMask, updateMask;

typedef struct UpdateAgentTierRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  AgentTier *agentTier;
  GPBFieldMask *updateMask;
} UpdateAgentTierRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAgentTierRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateAgentTierRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentTier",
        .dataTypeSpecific.className = GPBStringifySymbol(AgentTier),
        .number = UpdateAgentTierRequest_FieldNumber_AgentTier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateAgentTierRequest__storage_, agentTier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = UpdateAgentTierRequest_FieldNumber_UpdateMask,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateAgentTierRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateAgentTierRequest class]
                                     rootClass:[TierRoot class]
                                          file:TierRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateAgentTierRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

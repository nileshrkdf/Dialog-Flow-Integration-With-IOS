// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/document.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/Document.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/Operations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - DFDocumentRoot

@implementation DFDocumentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DFDocumentRoot_FileDescriptor

static GPBFileDescriptor *DFDocumentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                 objcPrefix:@"DF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DFDocument

@implementation DFDocument

@dynamic sourceOneOfCase;
@dynamic name;
@dynamic displayName;
@dynamic mimeType;
@dynamic knowledgeTypesArray, knowledgeTypesArray_Count;
@dynamic contentUri;
@dynamic content;

typedef struct DFDocument__storage_ {
  uint32_t _has_storage_[2];
  NSString *name;
  NSString *displayName;
  NSString *mimeType;
  GPBEnumArray *knowledgeTypesArray;
  NSString *contentUri;
  NSString *content;
} DFDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFDocument_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFDocument__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = DFDocument_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFDocument__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = DFDocument_FieldNumber_MimeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFDocument__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "knowledgeTypesArray",
        .dataTypeSpecific.enumDescFunc = DFDocument_KnowledgeType_EnumDescriptor,
        .number = DFDocument_FieldNumber_KnowledgeTypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFDocument__storage_, knowledgeTypesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contentUri",
        .dataTypeSpecific.className = NULL,
        .number = DFDocument_FieldNumber_ContentUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFDocument__storage_, contentUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = DFDocument_FieldNumber_Content,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFDocument__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFDocument class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFDocument__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DFDocument_ClearSourceOneOfCase(DFDocument *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum DFDocument_KnowledgeType

GPBEnumDescriptor *DFDocument_KnowledgeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "KnowledgeTypeUnspecified\000Faq\000ExtractiveQ"
        "a\000";
    static const int32_t values[] = {
        DFDocument_KnowledgeType_KnowledgeTypeUnspecified,
        DFDocument_KnowledgeType_Faq,
        DFDocument_KnowledgeType_ExtractiveQa,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFDocument_KnowledgeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFDocument_KnowledgeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFDocument_KnowledgeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFDocument_KnowledgeType_KnowledgeTypeUnspecified:
    case DFDocument_KnowledgeType_Faq:
    case DFDocument_KnowledgeType_ExtractiveQa:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFListDocumentsRequest

@implementation DFListDocumentsRequest

@dynamic parent;
@dynamic pageSize;
@dynamic pageToken;

typedef struct DFListDocumentsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *parent;
  NSString *pageToken;
} DFListDocumentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFListDocumentsRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListDocumentsRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = DFListDocumentsRequest_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFListDocumentsRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListDocumentsRequest_FieldNumber_PageToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFListDocumentsRequest__storage_, pageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListDocumentsRequest class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListDocumentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFListDocumentsResponse

@implementation DFListDocumentsResponse

@dynamic documentsArray, documentsArray_Count;
@dynamic nextPageToken;

typedef struct DFListDocumentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *documentsArray;
  NSString *nextPageToken;
} DFListDocumentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "documentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFDocument),
        .number = DFListDocumentsResponse_FieldNumber_DocumentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFListDocumentsResponse__storage_, documentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListDocumentsResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListDocumentsResponse__storage_, nextPageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListDocumentsResponse class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListDocumentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFGetDocumentRequest

@implementation DFGetDocumentRequest

@dynamic name;

typedef struct DFGetDocumentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DFGetDocumentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFGetDocumentRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFGetDocumentRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFGetDocumentRequest class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFGetDocumentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFCreateDocumentRequest

@implementation DFCreateDocumentRequest

@dynamic parent;
@dynamic hasDocument, document;

typedef struct DFCreateDocumentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  DFDocument *document;
} DFCreateDocumentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFCreateDocumentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFCreateDocumentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "document",
        .dataTypeSpecific.className = GPBStringifySymbol(DFDocument),
        .number = DFCreateDocumentRequest_FieldNumber_Document,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFCreateDocumentRequest__storage_, document),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFCreateDocumentRequest class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFCreateDocumentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFDeleteDocumentRequest

@implementation DFDeleteDocumentRequest

@dynamic name;

typedef struct DFDeleteDocumentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DFDeleteDocumentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFDeleteDocumentRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFDeleteDocumentRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFDeleteDocumentRequest class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFDeleteDocumentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFKnowledgeOperationMetadata

@implementation DFKnowledgeOperationMetadata

@dynamic state;

typedef struct DFKnowledgeOperationMetadata__storage_ {
  uint32_t _has_storage_[1];
  DFKnowledgeOperationMetadata_State state;
} DFKnowledgeOperationMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = DFKnowledgeOperationMetadata_State_EnumDescriptor,
        .number = DFKnowledgeOperationMetadata_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFKnowledgeOperationMetadata__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFKnowledgeOperationMetadata class]
                                     rootClass:[DFDocumentRoot class]
                                          file:DFDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFKnowledgeOperationMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFKnowledgeOperationMetadata_State_RawValue(DFKnowledgeOperationMetadata *message) {
  GPBDescriptor *descriptor = [DFKnowledgeOperationMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFKnowledgeOperationMetadata_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFKnowledgeOperationMetadata_State_RawValue(DFKnowledgeOperationMetadata *message, int32_t value) {
  GPBDescriptor *descriptor = [DFKnowledgeOperationMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFKnowledgeOperationMetadata_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DFKnowledgeOperationMetadata_State

GPBEnumDescriptor *DFKnowledgeOperationMetadata_State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StateUnspecified\000Pending\000Running\000Done\000";
    static const int32_t values[] = {
        DFKnowledgeOperationMetadata_State_StateUnspecified,
        DFKnowledgeOperationMetadata_State_Pending,
        DFKnowledgeOperationMetadata_State_Running,
        DFKnowledgeOperationMetadata_State_Done,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFKnowledgeOperationMetadata_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFKnowledgeOperationMetadata_State_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFKnowledgeOperationMetadata_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFKnowledgeOperationMetadata_State_StateUnspecified:
    case DFKnowledgeOperationMetadata_State_Pending:
    case DFKnowledgeOperationMetadata_State_Running:
    case DFKnowledgeOperationMetadata_State_Done:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

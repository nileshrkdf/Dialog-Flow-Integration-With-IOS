// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/agent.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/Agent.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/Operations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - DFAgentRoot

@implementation DFAgentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DFAgentRoot_FileDescriptor

static GPBFileDescriptor *DFAgentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                 objcPrefix:@"DF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DFAgent

@implementation DFAgent

@dynamic parent;
@dynamic displayName;
@dynamic defaultLanguageCode;
@dynamic supportedLanguageCodesArray, supportedLanguageCodesArray_Count;
@dynamic timeZone;
@dynamic description_p;
@dynamic avatarUri;
@dynamic enableLogging;
@dynamic matchMode;
@dynamic classificationThreshold;

typedef struct DFAgent__storage_ {
  uint32_t _has_storage_[1];
  DFAgent_MatchMode matchMode;
  float classificationThreshold;
  NSString *parent;
  NSString *displayName;
  NSString *defaultLanguageCode;
  NSMutableArray *supportedLanguageCodesArray;
  NSString *timeZone;
  NSString *description_p;
  NSString *avatarUri;
} DFAgent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFAgent__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFAgent__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "defaultLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_DefaultLanguageCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFAgent__storage_, defaultLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "supportedLanguageCodesArray",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_SupportedLanguageCodesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFAgent__storage_, supportedLanguageCodesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_TimeZone,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFAgent__storage_, timeZone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DFAgent__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatarUri",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_AvatarUri,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DFAgent__storage_, avatarUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enableLogging",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_EnableLogging,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "matchMode",
        .dataTypeSpecific.enumDescFunc = DFAgent_MatchMode_EnumDescriptor,
        .number = DFAgent_FieldNumber_MatchMode,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DFAgent__storage_, matchMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "classificationThreshold",
        .dataTypeSpecific.className = NULL,
        .number = DFAgent_FieldNumber_ClassificationThreshold,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DFAgent__storage_, classificationThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFAgent class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFAgent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFAgent_MatchMode_RawValue(DFAgent *message) {
  GPBDescriptor *descriptor = [DFAgent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFAgent_FieldNumber_MatchMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFAgent_MatchMode_RawValue(DFAgent *message, int32_t value) {
  GPBDescriptor *descriptor = [DFAgent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFAgent_FieldNumber_MatchMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DFAgent_MatchMode

GPBEnumDescriptor *DFAgent_MatchMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MatchModeUnspecified\000MatchModeHybrid\000Mat"
        "chModeMlOnly\000";
    static const int32_t values[] = {
        DFAgent_MatchMode_MatchModeUnspecified,
        DFAgent_MatchMode_MatchModeHybrid,
        DFAgent_MatchMode_MatchModeMlOnly,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFAgent_MatchMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFAgent_MatchMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFAgent_MatchMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFAgent_MatchMode_MatchModeUnspecified:
    case DFAgent_MatchMode_MatchModeHybrid:
    case DFAgent_MatchMode_MatchModeMlOnly:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFGetAgentRequest

@implementation DFGetAgentRequest

@dynamic parent;

typedef struct DFGetAgentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
} DFGetAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFGetAgentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFGetAgentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFGetAgentRequest class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFGetAgentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFSearchAgentsRequest

@implementation DFSearchAgentsRequest

@dynamic parent;
@dynamic pageSize;
@dynamic pageToken;

typedef struct DFSearchAgentsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *parent;
  NSString *pageToken;
} DFSearchAgentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFSearchAgentsRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFSearchAgentsRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = DFSearchAgentsRequest_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFSearchAgentsRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFSearchAgentsRequest_FieldNumber_PageToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFSearchAgentsRequest__storage_, pageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFSearchAgentsRequest class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFSearchAgentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFSearchAgentsResponse

@implementation DFSearchAgentsResponse

@dynamic agentsArray, agentsArray_Count;
@dynamic nextPageToken;

typedef struct DFSearchAgentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *agentsArray;
  NSString *nextPageToken;
} DFSearchAgentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFAgent),
        .number = DFSearchAgentsResponse_FieldNumber_AgentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFSearchAgentsResponse__storage_, agentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFSearchAgentsResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFSearchAgentsResponse__storage_, nextPageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFSearchAgentsResponse class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFSearchAgentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFTrainAgentRequest

@implementation DFTrainAgentRequest

@dynamic parent;

typedef struct DFTrainAgentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
} DFTrainAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFTrainAgentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFTrainAgentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFTrainAgentRequest class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFTrainAgentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFExportAgentRequest

@implementation DFExportAgentRequest

@dynamic parent;
@dynamic agentUri;

typedef struct DFExportAgentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSString *agentUri;
} DFExportAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFExportAgentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFExportAgentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentUri",
        .dataTypeSpecific.className = NULL,
        .number = DFExportAgentRequest_FieldNumber_AgentUri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFExportAgentRequest__storage_, agentUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFExportAgentRequest class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFExportAgentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFExportAgentResponse

@implementation DFExportAgentResponse

@dynamic agentOneOfCase;
@dynamic agentUri;
@dynamic agentContent;

typedef struct DFExportAgentResponse__storage_ {
  uint32_t _has_storage_[2];
  NSString *agentUri;
  NSData *agentContent;
} DFExportAgentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agentUri",
        .dataTypeSpecific.className = NULL,
        .number = DFExportAgentResponse_FieldNumber_AgentUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFExportAgentResponse__storage_, agentUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentContent",
        .dataTypeSpecific.className = NULL,
        .number = DFExportAgentResponse_FieldNumber_AgentContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFExportAgentResponse__storage_, agentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFExportAgentResponse class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFExportAgentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "agent",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DFExportAgentResponse_ClearAgentOneOfCase(DFExportAgentResponse *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DFImportAgentRequest

@implementation DFImportAgentRequest

@dynamic agentOneOfCase;
@dynamic parent;
@dynamic agentUri;
@dynamic agentContent;

typedef struct DFImportAgentRequest__storage_ {
  uint32_t _has_storage_[2];
  NSString *parent;
  NSString *agentUri;
  NSData *agentContent;
} DFImportAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFImportAgentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFImportAgentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentUri",
        .dataTypeSpecific.className = NULL,
        .number = DFImportAgentRequest_FieldNumber_AgentUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFImportAgentRequest__storage_, agentUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentContent",
        .dataTypeSpecific.className = NULL,
        .number = DFImportAgentRequest_FieldNumber_AgentContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFImportAgentRequest__storage_, agentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFImportAgentRequest class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFImportAgentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "agent",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DFImportAgentRequest_ClearAgentOneOfCase(DFImportAgentRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DFRestoreAgentRequest

@implementation DFRestoreAgentRequest

@dynamic agentOneOfCase;
@dynamic parent;
@dynamic agentUri;
@dynamic agentContent;

typedef struct DFRestoreAgentRequest__storage_ {
  uint32_t _has_storage_[2];
  NSString *parent;
  NSString *agentUri;
  NSData *agentContent;
} DFRestoreAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFRestoreAgentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFRestoreAgentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentUri",
        .dataTypeSpecific.className = NULL,
        .number = DFRestoreAgentRequest_FieldNumber_AgentUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFRestoreAgentRequest__storage_, agentUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentContent",
        .dataTypeSpecific.className = NULL,
        .number = DFRestoreAgentRequest_FieldNumber_AgentContent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFRestoreAgentRequest__storage_, agentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFRestoreAgentRequest class]
                                     rootClass:[DFAgentRoot class]
                                          file:DFAgentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFRestoreAgentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "agent",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DFRestoreAgentRequest_ClearAgentOneOfCase(DFRestoreAgentRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

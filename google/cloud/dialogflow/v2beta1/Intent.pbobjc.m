// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/intent.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/Intent.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/Context.pbobjc.h>
#import <googleapis/Operations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - DFIntentRoot

@implementation DFIntentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DFIntentRoot_FileDescriptor

static GPBFileDescriptor *DFIntentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                 objcPrefix:@"DF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum DFIntentView

GPBEnumDescriptor *DFIntentView_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IntentViewUnspecified\000IntentViewFull\000";
    static const int32_t values[] = {
        DFIntentView_IntentViewUnspecified,
        DFIntentView_IntentViewFull,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFIntentView)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFIntentView_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFIntentView_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFIntentView_IntentViewUnspecified:
    case DFIntentView_IntentViewFull:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFIntent

@implementation DFIntent

@dynamic name;
@dynamic displayName;
@dynamic webhookState;
@dynamic priority;
@dynamic isFallback;
@dynamic mlEnabled;
@dynamic mlDisabled;
@dynamic endInteraction;
@dynamic inputContextNamesArray, inputContextNamesArray_Count;
@dynamic eventsArray, eventsArray_Count;
@dynamic trainingPhrasesArray, trainingPhrasesArray_Count;
@dynamic action;
@dynamic outputContextsArray, outputContextsArray_Count;
@dynamic resetContexts;
@dynamic parametersArray, parametersArray_Count;
@dynamic messagesArray, messagesArray_Count;
@dynamic defaultResponsePlatformsArray, defaultResponsePlatformsArray_Count;
@dynamic rootFollowupIntentName;
@dynamic parentFollowupIntentName;
@dynamic followupIntentInfoArray, followupIntentInfoArray_Count;

typedef struct DFIntent__storage_ {
  uint32_t _has_storage_[1];
  int32_t priority;
  DFIntent_WebhookState webhookState;
  NSString *name;
  NSString *displayName;
  NSMutableArray *inputContextNamesArray;
  NSMutableArray *eventsArray;
  NSMutableArray *trainingPhrasesArray;
  NSString *action;
  NSMutableArray *outputContextsArray;
  NSMutableArray *parametersArray;
  NSMutableArray *messagesArray;
  GPBEnumArray *defaultResponsePlatformsArray;
  NSString *rootFollowupIntentName;
  NSString *parentFollowupIntentName;
  NSMutableArray *followupIntentInfoArray;
} DFIntent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priority",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_Priority,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFIntent__storage_, priority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isFallback",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_IsFallback,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "mlEnabled",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_MlEnabled,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "webhookState",
        .dataTypeSpecific.enumDescFunc = DFIntent_WebhookState_EnumDescriptor,
        .number = DFIntent_FieldNumber_WebhookState,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent__storage_, webhookState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "inputContextNamesArray",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_InputContextNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, inputContextNamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventsArray",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trainingPhrasesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_TrainingPhrase),
        .number = DFIntent_FieldNumber_TrainingPhrasesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, trainingPhrasesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_Action,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(DFIntent__storage_, action),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "outputContextsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFContext),
        .number = DFIntent_FieldNumber_OutputContextsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, outputContextsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resetContexts",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_ResetContexts,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "parametersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Parameter),
        .number = DFIntent_FieldNumber_ParametersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, parametersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message),
        .number = DFIntent_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultResponsePlatformsArray",
        .dataTypeSpecific.enumDescFunc = DFIntent_Message_Platform_EnumDescriptor,
        .number = DFIntent_FieldNumber_DefaultResponsePlatformsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, defaultResponsePlatformsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rootFollowupIntentName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_RootFollowupIntentName,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(DFIntent__storage_, rootFollowupIntentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentFollowupIntentName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_ParentFollowupIntentName,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(DFIntent__storage_, parentFollowupIntentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "followupIntentInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_FollowupIntentInfo),
        .number = DFIntent_FieldNumber_FollowupIntentInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent__storage_, followupIntentInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mlDisabled",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_MlDisabled,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "endInteraction",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FieldNumber_EndInteraction,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFIntent_WebhookState_RawValue(DFIntent *message) {
  GPBDescriptor *descriptor = [DFIntent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFIntent_FieldNumber_WebhookState];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFIntent_WebhookState_RawValue(DFIntent *message, int32_t value) {
  GPBDescriptor *descriptor = [DFIntent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFIntent_FieldNumber_WebhookState];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DFIntent_WebhookState

GPBEnumDescriptor *DFIntent_WebhookState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WebhookStateUnspecified\000WebhookStateEnab"
        "led\000WebhookStateEnabledForSlotFilling\000";
    static const int32_t values[] = {
        DFIntent_WebhookState_WebhookStateUnspecified,
        DFIntent_WebhookState_WebhookStateEnabled,
        DFIntent_WebhookState_WebhookStateEnabledForSlotFilling,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFIntent_WebhookState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFIntent_WebhookState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFIntent_WebhookState_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFIntent_WebhookState_WebhookStateUnspecified:
    case DFIntent_WebhookState_WebhookStateEnabled:
    case DFIntent_WebhookState_WebhookStateEnabledForSlotFilling:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFIntent_TrainingPhrase

@implementation DFIntent_TrainingPhrase

@dynamic name;
@dynamic type;
@dynamic partsArray, partsArray_Count;
@dynamic timesAddedCount;

typedef struct DFIntent_TrainingPhrase__storage_ {
  uint32_t _has_storage_[1];
  DFIntent_TrainingPhrase_Type type;
  int32_t timesAddedCount;
  NSString *name;
  NSMutableArray *partsArray;
} DFIntent_TrainingPhrase__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_TrainingPhrase_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = DFIntent_TrainingPhrase_Type_EnumDescriptor,
        .number = DFIntent_TrainingPhrase_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "partsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_TrainingPhrase_Part),
        .number = DFIntent_TrainingPhrase_FieldNumber_PartsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase__storage_, partsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timesAddedCount",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_TrainingPhrase_FieldNumber_TimesAddedCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase__storage_, timesAddedCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_TrainingPhrase class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_TrainingPhrase__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFIntent_TrainingPhrase_Type_RawValue(DFIntent_TrainingPhrase *message) {
  GPBDescriptor *descriptor = [DFIntent_TrainingPhrase descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFIntent_TrainingPhrase_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFIntent_TrainingPhrase_Type_RawValue(DFIntent_TrainingPhrase *message, int32_t value) {
  GPBDescriptor *descriptor = [DFIntent_TrainingPhrase descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFIntent_TrainingPhrase_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DFIntent_TrainingPhrase_Type

GPBEnumDescriptor *DFIntent_TrainingPhrase_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnspecified\000Example\000Template\000";
    static const int32_t values[] = {
        DFIntent_TrainingPhrase_Type_TypeUnspecified,
        DFIntent_TrainingPhrase_Type_Example,
        DFIntent_TrainingPhrase_Type_Template,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFIntent_TrainingPhrase_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFIntent_TrainingPhrase_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFIntent_TrainingPhrase_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFIntent_TrainingPhrase_Type_TypeUnspecified:
    case DFIntent_TrainingPhrase_Type_Example:
    case DFIntent_TrainingPhrase_Type_Template:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFIntent_TrainingPhrase_Part

@implementation DFIntent_TrainingPhrase_Part

@dynamic text;
@dynamic entityType;
@dynamic alias;
@dynamic userDefined;

typedef struct DFIntent_TrainingPhrase_Part__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSString *entityType;
  NSString *alias;
} DFIntent_TrainingPhrase_Part__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_TrainingPhrase_Part_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase_Part__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityType",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_TrainingPhrase_Part_FieldNumber_EntityType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase_Part__storage_, entityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_TrainingPhrase_Part_FieldNumber_Alias,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_TrainingPhrase_Part__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userDefined",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_TrainingPhrase_Part_FieldNumber_UserDefined,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_TrainingPhrase_Part class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_TrainingPhrase_Part__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_TrainingPhrase)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Parameter

@implementation DFIntent_Parameter

@dynamic name;
@dynamic displayName;
@dynamic value;
@dynamic defaultValue;
@dynamic entityTypeDisplayName;
@dynamic mandatory;
@dynamic promptsArray, promptsArray_Count;
@dynamic isList;

typedef struct DFIntent_Parameter__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *displayName;
  NSString *value;
  NSString *defaultValue;
  NSString *entityTypeDisplayName;
  NSMutableArray *promptsArray;
} DFIntent_Parameter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Parameter__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Parameter__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_Value,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_Parameter__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_DefaultValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFIntent_Parameter__storage_, defaultValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityTypeDisplayName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_EntityTypeDisplayName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DFIntent_Parameter__storage_, entityTypeDisplayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mandatory",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_Mandatory,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "promptsArray",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_PromptsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Parameter__storage_, promptsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isList",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Parameter_FieldNumber_IsList,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Parameter class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Parameter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message

@implementation DFIntent_Message

@dynamic messageOneOfCase;
@dynamic text;
@dynamic image;
@dynamic quickReplies;
@dynamic card;
@dynamic payload;
@dynamic simpleResponses;
@dynamic basicCard;
@dynamic suggestions;
@dynamic linkOutSuggestion;
@dynamic listSelect;
@dynamic carouselSelect;
@dynamic telephonyPlayAudio;
@dynamic telephonySynthesizeSpeech;
@dynamic telephonyTransferCall;
@dynamic platform;

typedef struct DFIntent_Message__storage_ {
  uint32_t _has_storage_[2];
  DFIntent_Message_Platform platform;
  DFIntent_Message_Text *text;
  DFIntent_Message_Image *image;
  DFIntent_Message_QuickReplies *quickReplies;
  DFIntent_Message_Card *card;
  GPBStruct *payload;
  DFIntent_Message_SimpleResponses *simpleResponses;
  DFIntent_Message_BasicCard *basicCard;
  DFIntent_Message_Suggestions *suggestions;
  DFIntent_Message_LinkOutSuggestion *linkOutSuggestion;
  DFIntent_Message_ListSelect *listSelect;
  DFIntent_Message_CarouselSelect *carouselSelect;
  DFIntent_Message_TelephonyPlayAudio *telephonyPlayAudio;
  DFIntent_Message_TelephonySynthesizeSpeech *telephonySynthesizeSpeech;
  DFIntent_Message_TelephonyTransferCall *telephonyTransferCall;
} DFIntent_Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Text),
        .number = DFIntent_Message_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Image),
        .number = DFIntent_Message_FieldNumber_Image,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quickReplies",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_QuickReplies),
        .number = DFIntent_Message_FieldNumber_QuickReplies,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, quickReplies),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "card",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Card),
        .number = DFIntent_Message_FieldNumber_Card,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStruct),
        .number = DFIntent_Message_FieldNumber_Payload,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = DFIntent_Message_Platform_EnumDescriptor,
        .number = DFIntent_Message_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "simpleResponses",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_SimpleResponses),
        .number = DFIntent_Message_FieldNumber_SimpleResponses,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, simpleResponses),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "basicCard",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_BasicCard),
        .number = DFIntent_Message_FieldNumber_BasicCard,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, basicCard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "suggestions",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Suggestions),
        .number = DFIntent_Message_FieldNumber_Suggestions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, suggestions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkOutSuggestion",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_LinkOutSuggestion),
        .number = DFIntent_Message_FieldNumber_LinkOutSuggestion,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, linkOutSuggestion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listSelect",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_ListSelect),
        .number = DFIntent_Message_FieldNumber_ListSelect,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, listSelect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "carouselSelect",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_CarouselSelect),
        .number = DFIntent_Message_FieldNumber_CarouselSelect,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, carouselSelect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "telephonyPlayAudio",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_TelephonyPlayAudio),
        .number = DFIntent_Message_FieldNumber_TelephonyPlayAudio,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, telephonyPlayAudio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "telephonySynthesizeSpeech",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_TelephonySynthesizeSpeech),
        .number = DFIntent_Message_FieldNumber_TelephonySynthesizeSpeech,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, telephonySynthesizeSpeech),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "telephonyTransferCall",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_TelephonyTransferCall),
        .number = DFIntent_Message_FieldNumber_TelephonyTransferCall,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message__storage_, telephonyTransferCall),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "message",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFIntent_Message_Platform_RawValue(DFIntent_Message *message) {
  GPBDescriptor *descriptor = [DFIntent_Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFIntent_Message_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFIntent_Message_Platform_RawValue(DFIntent_Message *message, int32_t value) {
  GPBDescriptor *descriptor = [DFIntent_Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFIntent_Message_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void DFIntent_Message_ClearMessageOneOfCase(DFIntent_Message *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum DFIntent_Message_Platform

GPBEnumDescriptor *DFIntent_Message_Platform_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PlatformUnspecified\000Facebook\000Slack\000Teleg"
        "ram\000Kik\000Skype\000Line\000Viber\000ActionsOnGoogle"
        "\000Telephony\000";
    static const int32_t values[] = {
        DFIntent_Message_Platform_PlatformUnspecified,
        DFIntent_Message_Platform_Facebook,
        DFIntent_Message_Platform_Slack,
        DFIntent_Message_Platform_Telegram,
        DFIntent_Message_Platform_Kik,
        DFIntent_Message_Platform_Skype,
        DFIntent_Message_Platform_Line,
        DFIntent_Message_Platform_Viber,
        DFIntent_Message_Platform_ActionsOnGoogle,
        DFIntent_Message_Platform_Telephony,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFIntent_Message_Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFIntent_Message_Platform_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFIntent_Message_Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFIntent_Message_Platform_PlatformUnspecified:
    case DFIntent_Message_Platform_Facebook:
    case DFIntent_Message_Platform_Slack:
    case DFIntent_Message_Platform_Telegram:
    case DFIntent_Message_Platform_Kik:
    case DFIntent_Message_Platform_Skype:
    case DFIntent_Message_Platform_Line:
    case DFIntent_Message_Platform_Viber:
    case DFIntent_Message_Platform_ActionsOnGoogle:
    case DFIntent_Message_Platform_Telephony:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFIntent_Message_Text

@implementation DFIntent_Message_Text

@dynamic textArray, textArray_Count;

typedef struct DFIntent_Message_Text__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *textArray;
} DFIntent_Message_Text__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "textArray",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Text_FieldNumber_TextArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_Text__storage_, textArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_Text class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_Text__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_Image

@implementation DFIntent_Message_Image

@dynamic imageUri;
@dynamic accessibilityText;

typedef struct DFIntent_Message_Image__storage_ {
  uint32_t _has_storage_[1];
  NSString *imageUri;
  NSString *accessibilityText;
} DFIntent_Message_Image__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageUri",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Image_FieldNumber_ImageUri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_Image__storage_, imageUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessibilityText",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Image_FieldNumber_AccessibilityText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_Image__storage_, accessibilityText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_Image class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_Image__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_QuickReplies

@implementation DFIntent_Message_QuickReplies

@dynamic title;
@dynamic quickRepliesArray, quickRepliesArray_Count;

typedef struct DFIntent_Message_QuickReplies__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSMutableArray *quickRepliesArray;
} DFIntent_Message_QuickReplies__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_QuickReplies_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_QuickReplies__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quickRepliesArray",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_QuickReplies_FieldNumber_QuickRepliesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_QuickReplies__storage_, quickRepliesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_QuickReplies class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_QuickReplies__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_Card

@implementation DFIntent_Message_Card

@dynamic title;
@dynamic subtitle;
@dynamic imageUri;
@dynamic buttonsArray, buttonsArray_Count;

typedef struct DFIntent_Message_Card__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *subtitle;
  NSString *imageUri;
  NSMutableArray *buttonsArray;
} DFIntent_Message_Card__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Card_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_Card__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subtitle",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Card_FieldNumber_Subtitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_Card__storage_, subtitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageUri",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Card_FieldNumber_ImageUri,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_Message_Card__storage_, imageUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Card_Button),
        .number = DFIntent_Message_Card_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_Card__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_Card class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_Card__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_Card_Button

@implementation DFIntent_Message_Card_Button

@dynamic text;
@dynamic postback;

typedef struct DFIntent_Message_Card_Button__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSString *postback;
} DFIntent_Message_Card_Button__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Card_Button_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_Card_Button__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postback",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Card_Button_FieldNumber_Postback,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_Card_Button__storage_, postback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_Card_Button class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_Card_Button__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message_Card)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_SimpleResponse

@implementation DFIntent_Message_SimpleResponse

@dynamic textToSpeech;
@dynamic ssml;
@dynamic displayText;

typedef struct DFIntent_Message_SimpleResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *textToSpeech;
  NSString *ssml;
  NSString *displayText;
} DFIntent_Message_SimpleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "textToSpeech",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_SimpleResponse_FieldNumber_TextToSpeech,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_SimpleResponse__storage_, textToSpeech),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ssml",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_SimpleResponse_FieldNumber_Ssml,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_SimpleResponse__storage_, ssml),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayText",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_SimpleResponse_FieldNumber_DisplayText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_Message_SimpleResponse__storage_, displayText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_SimpleResponse class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_SimpleResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_SimpleResponses

@implementation DFIntent_Message_SimpleResponses

@dynamic simpleResponsesArray, simpleResponsesArray_Count;

typedef struct DFIntent_Message_SimpleResponses__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *simpleResponsesArray;
} DFIntent_Message_SimpleResponses__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "simpleResponsesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_SimpleResponse),
        .number = DFIntent_Message_SimpleResponses_FieldNumber_SimpleResponsesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_SimpleResponses__storage_, simpleResponsesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_SimpleResponses class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_SimpleResponses__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_BasicCard

@implementation DFIntent_Message_BasicCard

@dynamic title;
@dynamic subtitle;
@dynamic formattedText;
@dynamic hasImage, image;
@dynamic buttonsArray, buttonsArray_Count;

typedef struct DFIntent_Message_BasicCard__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *subtitle;
  NSString *formattedText;
  DFIntent_Message_Image *image;
  NSMutableArray *buttonsArray;
} DFIntent_Message_BasicCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_BasicCard_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subtitle",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_BasicCard_FieldNumber_Subtitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard__storage_, subtitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formattedText",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_BasicCard_FieldNumber_FormattedText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard__storage_, formattedText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Image),
        .number = DFIntent_Message_BasicCard_FieldNumber_Image,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_BasicCard_Button),
        .number = DFIntent_Message_BasicCard_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_BasicCard class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_BasicCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_BasicCard_Button

@implementation DFIntent_Message_BasicCard_Button

@dynamic title;
@dynamic hasOpenUriAction, openUriAction;

typedef struct DFIntent_Message_BasicCard_Button__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  DFIntent_Message_BasicCard_Button_OpenUriAction *openUriAction;
} DFIntent_Message_BasicCard_Button__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_BasicCard_Button_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard_Button__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openUriAction",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_BasicCard_Button_OpenUriAction),
        .number = DFIntent_Message_BasicCard_Button_FieldNumber_OpenUriAction,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard_Button__storage_, openUriAction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_BasicCard_Button class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_BasicCard_Button__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message_BasicCard)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_BasicCard_Button_OpenUriAction

@implementation DFIntent_Message_BasicCard_Button_OpenUriAction

@dynamic uri;

typedef struct DFIntent_Message_BasicCard_Button_OpenUriAction__storage_ {
  uint32_t _has_storage_[1];
  NSString *uri;
} DFIntent_Message_BasicCard_Button_OpenUriAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uri",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_BasicCard_Button_OpenUriAction_FieldNumber_Uri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_BasicCard_Button_OpenUriAction__storage_, uri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_BasicCard_Button_OpenUriAction class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_BasicCard_Button_OpenUriAction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message_BasicCard_Button)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_Suggestion

@implementation DFIntent_Message_Suggestion

@dynamic title;

typedef struct DFIntent_Message_Suggestion__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
} DFIntent_Message_Suggestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_Suggestion_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_Suggestion__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_Suggestion class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_Suggestion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_Suggestions

@implementation DFIntent_Message_Suggestions

@dynamic suggestionsArray, suggestionsArray_Count;

typedef struct DFIntent_Message_Suggestions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *suggestionsArray;
} DFIntent_Message_Suggestions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "suggestionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Suggestion),
        .number = DFIntent_Message_Suggestions_FieldNumber_SuggestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_Suggestions__storage_, suggestionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_Suggestions class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_Suggestions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_LinkOutSuggestion

@implementation DFIntent_Message_LinkOutSuggestion

@dynamic destinationName;
@dynamic uri;

typedef struct DFIntent_Message_LinkOutSuggestion__storage_ {
  uint32_t _has_storage_[1];
  NSString *destinationName;
  NSString *uri;
} DFIntent_Message_LinkOutSuggestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "destinationName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_LinkOutSuggestion_FieldNumber_DestinationName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_LinkOutSuggestion__storage_, destinationName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_LinkOutSuggestion_FieldNumber_Uri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_LinkOutSuggestion__storage_, uri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_LinkOutSuggestion class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_LinkOutSuggestion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_ListSelect

@implementation DFIntent_Message_ListSelect

@dynamic title;
@dynamic itemsArray, itemsArray_Count;

typedef struct DFIntent_Message_ListSelect__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSMutableArray *itemsArray;
} DFIntent_Message_ListSelect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_ListSelect_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_ListSelect__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_ListSelect_Item),
        .number = DFIntent_Message_ListSelect_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_ListSelect__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_ListSelect class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_ListSelect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_ListSelect_Item

@implementation DFIntent_Message_ListSelect_Item

@dynamic hasInfo, info;
@dynamic title;
@dynamic description_p;
@dynamic hasImage, image;

typedef struct DFIntent_Message_ListSelect_Item__storage_ {
  uint32_t _has_storage_[1];
  DFIntent_Message_SelectItemInfo *info;
  NSString *title;
  NSString *description_p;
  DFIntent_Message_Image *image;
} DFIntent_Message_ListSelect_Item__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_SelectItemInfo),
        .number = DFIntent_Message_ListSelect_Item_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_ListSelect_Item__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_ListSelect_Item_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_ListSelect_Item__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_ListSelect_Item_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_Message_ListSelect_Item__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Image),
        .number = DFIntent_Message_ListSelect_Item_FieldNumber_Image,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFIntent_Message_ListSelect_Item__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_ListSelect_Item class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_ListSelect_Item__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message_ListSelect)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_CarouselSelect

@implementation DFIntent_Message_CarouselSelect

@dynamic itemsArray, itemsArray_Count;

typedef struct DFIntent_Message_CarouselSelect__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} DFIntent_Message_CarouselSelect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_CarouselSelect_Item),
        .number = DFIntent_Message_CarouselSelect_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_CarouselSelect__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_CarouselSelect class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_CarouselSelect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_CarouselSelect_Item

@implementation DFIntent_Message_CarouselSelect_Item

@dynamic hasInfo, info;
@dynamic title;
@dynamic description_p;
@dynamic hasImage, image;

typedef struct DFIntent_Message_CarouselSelect_Item__storage_ {
  uint32_t _has_storage_[1];
  DFIntent_Message_SelectItemInfo *info;
  NSString *title;
  NSString *description_p;
  DFIntent_Message_Image *image;
} DFIntent_Message_CarouselSelect_Item__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_SelectItemInfo),
        .number = DFIntent_Message_CarouselSelect_Item_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_CarouselSelect_Item__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_CarouselSelect_Item_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_Message_CarouselSelect_Item__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_CarouselSelect_Item_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFIntent_Message_CarouselSelect_Item__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent_Message_Image),
        .number = DFIntent_Message_CarouselSelect_Item_FieldNumber_Image,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFIntent_Message_CarouselSelect_Item__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_CarouselSelect_Item class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_CarouselSelect_Item__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message_CarouselSelect)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_SelectItemInfo

@implementation DFIntent_Message_SelectItemInfo

@dynamic key;
@dynamic synonymsArray, synonymsArray_Count;

typedef struct DFIntent_Message_SelectItemInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSMutableArray *synonymsArray;
} DFIntent_Message_SelectItemInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_SelectItemInfo_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_SelectItemInfo__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "synonymsArray",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_SelectItemInfo_FieldNumber_SynonymsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntent_Message_SelectItemInfo__storage_, synonymsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_SelectItemInfo class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_SelectItemInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_TelephonyPlayAudio

@implementation DFIntent_Message_TelephonyPlayAudio

@dynamic audioUri;

typedef struct DFIntent_Message_TelephonyPlayAudio__storage_ {
  uint32_t _has_storage_[1];
  NSString *audioUri;
} DFIntent_Message_TelephonyPlayAudio__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioUri",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_TelephonyPlayAudio_FieldNumber_AudioUri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_TelephonyPlayAudio__storage_, audioUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_TelephonyPlayAudio class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_TelephonyPlayAudio__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_Message_TelephonySynthesizeSpeech

@implementation DFIntent_Message_TelephonySynthesizeSpeech

@dynamic sourceOneOfCase;
@dynamic text;
@dynamic ssml;

typedef struct DFIntent_Message_TelephonySynthesizeSpeech__storage_ {
  uint32_t _has_storage_[2];
  NSString *text;
  NSString *ssml;
} DFIntent_Message_TelephonySynthesizeSpeech__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_TelephonySynthesizeSpeech_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message_TelephonySynthesizeSpeech__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ssml",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_TelephonySynthesizeSpeech_FieldNumber_Ssml,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFIntent_Message_TelephonySynthesizeSpeech__storage_, ssml),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_TelephonySynthesizeSpeech class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_TelephonySynthesizeSpeech__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DFIntent_Message_TelephonySynthesizeSpeech_ClearSourceOneOfCase(DFIntent_Message_TelephonySynthesizeSpeech *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DFIntent_Message_TelephonyTransferCall

@implementation DFIntent_Message_TelephonyTransferCall

@dynamic phoneNumber;

typedef struct DFIntent_Message_TelephonyTransferCall__storage_ {
  uint32_t _has_storage_[1];
  NSString *phoneNumber;
} DFIntent_Message_TelephonyTransferCall__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_Message_TelephonyTransferCall_FieldNumber_PhoneNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_Message_TelephonyTransferCall__storage_, phoneNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_Message_TelephonyTransferCall class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_Message_TelephonyTransferCall__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent_Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntent_FollowupIntentInfo

@implementation DFIntent_FollowupIntentInfo

@dynamic followupIntentName;
@dynamic parentFollowupIntentName;

typedef struct DFIntent_FollowupIntentInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *followupIntentName;
  NSString *parentFollowupIntentName;
} DFIntent_FollowupIntentInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "followupIntentName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FollowupIntentInfo_FieldNumber_FollowupIntentName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFIntent_FollowupIntentInfo__storage_, followupIntentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentFollowupIntentName",
        .dataTypeSpecific.className = NULL,
        .number = DFIntent_FollowupIntentInfo_FieldNumber_ParentFollowupIntentName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFIntent_FollowupIntentInfo__storage_, parentFollowupIntentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntent_FollowupIntentInfo class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntent_FollowupIntentInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFIntent)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFListIntentsRequest

@implementation DFListIntentsRequest

@dynamic parent;
@dynamic languageCode;
@dynamic intentView;
@dynamic pageSize;
@dynamic pageToken;

typedef struct DFListIntentsRequest__storage_ {
  uint32_t _has_storage_[1];
  DFIntentView intentView;
  int32_t pageSize;
  NSString *parent;
  NSString *languageCode;
  NSString *pageToken;
} DFListIntentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFListIntentsRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListIntentsRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFListIntentsRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFListIntentsRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intentView",
        .dataTypeSpecific.enumDescFunc = DFIntentView_EnumDescriptor,
        .number = DFListIntentsRequest_FieldNumber_IntentView,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFListIntentsRequest__storage_, intentView),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = DFListIntentsRequest_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFListIntentsRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListIntentsRequest_FieldNumber_PageToken,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DFListIntentsRequest__storage_, pageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListIntentsRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListIntentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFListIntentsRequest_IntentView_RawValue(DFListIntentsRequest *message) {
  GPBDescriptor *descriptor = [DFListIntentsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFListIntentsRequest_FieldNumber_IntentView];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFListIntentsRequest_IntentView_RawValue(DFListIntentsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DFListIntentsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFListIntentsRequest_FieldNumber_IntentView];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - DFListIntentsResponse

@implementation DFListIntentsResponse

@dynamic intentsArray, intentsArray_Count;
@dynamic nextPageToken;

typedef struct DFListIntentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *intentsArray;
  NSString *nextPageToken;
} DFListIntentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent),
        .number = DFListIntentsResponse_FieldNumber_IntentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFListIntentsResponse__storage_, intentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListIntentsResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListIntentsResponse__storage_, nextPageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListIntentsResponse class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListIntentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFGetIntentRequest

@implementation DFGetIntentRequest

@dynamic name;
@dynamic languageCode;
@dynamic intentView;

typedef struct DFGetIntentRequest__storage_ {
  uint32_t _has_storage_[1];
  DFIntentView intentView;
  NSString *name;
  NSString *languageCode;
} DFGetIntentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFGetIntentRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFGetIntentRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFGetIntentRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFGetIntentRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intentView",
        .dataTypeSpecific.enumDescFunc = DFIntentView_EnumDescriptor,
        .number = DFGetIntentRequest_FieldNumber_IntentView,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFGetIntentRequest__storage_, intentView),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFGetIntentRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFGetIntentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFGetIntentRequest_IntentView_RawValue(DFGetIntentRequest *message) {
  GPBDescriptor *descriptor = [DFGetIntentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFGetIntentRequest_FieldNumber_IntentView];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFGetIntentRequest_IntentView_RawValue(DFGetIntentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DFGetIntentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFGetIntentRequest_FieldNumber_IntentView];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - DFCreateIntentRequest

@implementation DFCreateIntentRequest

@dynamic parent;
@dynamic hasIntent, intent;
@dynamic languageCode;
@dynamic intentView;

typedef struct DFCreateIntentRequest__storage_ {
  uint32_t _has_storage_[1];
  DFIntentView intentView;
  NSString *parent;
  DFIntent *intent;
  NSString *languageCode;
} DFCreateIntentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFCreateIntentRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFCreateIntentRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intent",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent),
        .number = DFCreateIntentRequest_FieldNumber_Intent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFCreateIntentRequest__storage_, intent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFCreateIntentRequest_FieldNumber_LanguageCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFCreateIntentRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intentView",
        .dataTypeSpecific.enumDescFunc = DFIntentView_EnumDescriptor,
        .number = DFCreateIntentRequest_FieldNumber_IntentView,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFCreateIntentRequest__storage_, intentView),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFCreateIntentRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFCreateIntentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFCreateIntentRequest_IntentView_RawValue(DFCreateIntentRequest *message) {
  GPBDescriptor *descriptor = [DFCreateIntentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFCreateIntentRequest_FieldNumber_IntentView];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFCreateIntentRequest_IntentView_RawValue(DFCreateIntentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DFCreateIntentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFCreateIntentRequest_FieldNumber_IntentView];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - DFUpdateIntentRequest

@implementation DFUpdateIntentRequest

@dynamic hasIntent, intent;
@dynamic languageCode;
@dynamic hasUpdateMask, updateMask;
@dynamic intentView;

typedef struct DFUpdateIntentRequest__storage_ {
  uint32_t _has_storage_[1];
  DFIntentView intentView;
  DFIntent *intent;
  NSString *languageCode;
  GPBFieldMask *updateMask;
} DFUpdateIntentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intent",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent),
        .number = DFUpdateIntentRequest_FieldNumber_Intent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFUpdateIntentRequest__storage_, intent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFUpdateIntentRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFUpdateIntentRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = DFUpdateIntentRequest_FieldNumber_UpdateMask,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFUpdateIntentRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intentView",
        .dataTypeSpecific.enumDescFunc = DFIntentView_EnumDescriptor,
        .number = DFUpdateIntentRequest_FieldNumber_IntentView,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFUpdateIntentRequest__storage_, intentView),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFUpdateIntentRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFUpdateIntentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFUpdateIntentRequest_IntentView_RawValue(DFUpdateIntentRequest *message) {
  GPBDescriptor *descriptor = [DFUpdateIntentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFUpdateIntentRequest_FieldNumber_IntentView];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFUpdateIntentRequest_IntentView_RawValue(DFUpdateIntentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DFUpdateIntentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFUpdateIntentRequest_FieldNumber_IntentView];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - DFDeleteIntentRequest

@implementation DFDeleteIntentRequest

@dynamic name;

typedef struct DFDeleteIntentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DFDeleteIntentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFDeleteIntentRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFDeleteIntentRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFDeleteIntentRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFDeleteIntentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchUpdateIntentsRequest

@implementation DFBatchUpdateIntentsRequest

@dynamic intentBatchOneOfCase;
@dynamic parent;
@dynamic intentBatchUri;
@dynamic intentBatchInline;
@dynamic languageCode;
@dynamic hasUpdateMask, updateMask;
@dynamic intentView;

typedef struct DFBatchUpdateIntentsRequest__storage_ {
  uint32_t _has_storage_[2];
  DFIntentView intentView;
  NSString *parent;
  NSString *intentBatchUri;
  DFIntentBatch *intentBatchInline;
  NSString *languageCode;
  GPBFieldMask *updateMask;
} DFBatchUpdateIntentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateIntentsRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intentBatchUri",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateIntentsRequest_FieldNumber_IntentBatchUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsRequest__storage_, intentBatchUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intentBatchInline",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntentBatch),
        .number = DFBatchUpdateIntentsRequest_FieldNumber_IntentBatchInline,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsRequest__storage_, intentBatchInline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateIntentsRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = DFBatchUpdateIntentsRequest_FieldNumber_UpdateMask,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intentView",
        .dataTypeSpecific.enumDescFunc = DFIntentView_EnumDescriptor,
        .number = DFBatchUpdateIntentsRequest_FieldNumber_IntentView,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsRequest__storage_, intentView),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchUpdateIntentsRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchUpdateIntentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "intentBatch",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFBatchUpdateIntentsRequest_IntentView_RawValue(DFBatchUpdateIntentsRequest *message) {
  GPBDescriptor *descriptor = [DFBatchUpdateIntentsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFBatchUpdateIntentsRequest_FieldNumber_IntentView];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFBatchUpdateIntentsRequest_IntentView_RawValue(DFBatchUpdateIntentsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DFBatchUpdateIntentsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFBatchUpdateIntentsRequest_FieldNumber_IntentView];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void DFBatchUpdateIntentsRequest_ClearIntentBatchOneOfCase(DFBatchUpdateIntentsRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DFBatchUpdateIntentsResponse

@implementation DFBatchUpdateIntentsResponse

@dynamic intentsArray, intentsArray_Count;

typedef struct DFBatchUpdateIntentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *intentsArray;
} DFBatchUpdateIntentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent),
        .number = DFBatchUpdateIntentsResponse_FieldNumber_IntentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchUpdateIntentsResponse__storage_, intentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchUpdateIntentsResponse class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchUpdateIntentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchDeleteIntentsRequest

@implementation DFBatchDeleteIntentsRequest

@dynamic parent;
@dynamic intentsArray, intentsArray_Count;

typedef struct DFBatchDeleteIntentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSMutableArray *intentsArray;
} DFBatchDeleteIntentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchDeleteIntentsRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchDeleteIntentsRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent),
        .number = DFBatchDeleteIntentsRequest_FieldNumber_IntentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchDeleteIntentsRequest__storage_, intentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchDeleteIntentsRequest class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchDeleteIntentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFIntentBatch

@implementation DFIntentBatch

@dynamic intentsArray, intentsArray_Count;

typedef struct DFIntentBatch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *intentsArray;
} DFIntentBatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFIntent),
        .number = DFIntentBatch_FieldNumber_IntentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFIntentBatch__storage_, intentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFIntentBatch class]
                                     rootClass:[DFIntentRoot class]
                                          file:DFIntentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFIntentBatch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/entity_type.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/EntityType.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/Operations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - DFEntityTypeRoot

@implementation DFEntityTypeRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DFEntityTypeRoot_FileDescriptor

static GPBFileDescriptor *DFEntityTypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                 objcPrefix:@"DF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DFEntityType

@implementation DFEntityType

@dynamic name;
@dynamic displayName;
@dynamic kind;
@dynamic autoExpansionMode;
@dynamic entitiesArray, entitiesArray_Count;

typedef struct DFEntityType__storage_ {
  uint32_t _has_storage_[1];
  DFEntityType_Kind kind;
  DFEntityType_AutoExpansionMode autoExpansionMode;
  NSString *name;
  NSString *displayName;
  NSMutableArray *entitiesArray;
} DFEntityType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFEntityType_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFEntityType__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = DFEntityType_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFEntityType__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = DFEntityType_Kind_EnumDescriptor,
        .number = DFEntityType_FieldNumber_Kind,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFEntityType__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "autoExpansionMode",
        .dataTypeSpecific.enumDescFunc = DFEntityType_AutoExpansionMode_EnumDescriptor,
        .number = DFEntityType_FieldNumber_AutoExpansionMode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFEntityType__storage_, autoExpansionMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "entitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType_Entity),
        .number = DFEntityType_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFEntityType__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFEntityType class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFEntityType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFEntityType_Kind_RawValue(DFEntityType *message) {
  GPBDescriptor *descriptor = [DFEntityType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFEntityType_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFEntityType_Kind_RawValue(DFEntityType *message, int32_t value) {
  GPBDescriptor *descriptor = [DFEntityType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFEntityType_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t DFEntityType_AutoExpansionMode_RawValue(DFEntityType *message) {
  GPBDescriptor *descriptor = [DFEntityType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFEntityType_FieldNumber_AutoExpansionMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFEntityType_AutoExpansionMode_RawValue(DFEntityType *message, int32_t value) {
  GPBDescriptor *descriptor = [DFEntityType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFEntityType_FieldNumber_AutoExpansionMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DFEntityType_Kind

GPBEnumDescriptor *DFEntityType_Kind_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "KindUnspecified\000KindMap\000KindList\000";
    static const int32_t values[] = {
        DFEntityType_Kind_KindUnspecified,
        DFEntityType_Kind_KindMap,
        DFEntityType_Kind_KindList,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFEntityType_Kind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFEntityType_Kind_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFEntityType_Kind_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFEntityType_Kind_KindUnspecified:
    case DFEntityType_Kind_KindMap:
    case DFEntityType_Kind_KindList:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum DFEntityType_AutoExpansionMode

GPBEnumDescriptor *DFEntityType_AutoExpansionMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AutoExpansionModeUnspecified\000AutoExpansi"
        "onModeDefault\000";
    static const int32_t values[] = {
        DFEntityType_AutoExpansionMode_AutoExpansionModeUnspecified,
        DFEntityType_AutoExpansionMode_AutoExpansionModeDefault,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFEntityType_AutoExpansionMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFEntityType_AutoExpansionMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFEntityType_AutoExpansionMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFEntityType_AutoExpansionMode_AutoExpansionModeUnspecified:
    case DFEntityType_AutoExpansionMode_AutoExpansionModeDefault:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFEntityType_Entity

@implementation DFEntityType_Entity

@dynamic value;
@dynamic synonymsArray, synonymsArray_Count;

typedef struct DFEntityType_Entity__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
  NSMutableArray *synonymsArray;
} DFEntityType_Entity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = DFEntityType_Entity_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFEntityType_Entity__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "synonymsArray",
        .dataTypeSpecific.className = NULL,
        .number = DFEntityType_Entity_FieldNumber_SynonymsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFEntityType_Entity__storage_, synonymsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFEntityType_Entity class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFEntityType_Entity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DFEntityType)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFListEntityTypesRequest

@implementation DFListEntityTypesRequest

@dynamic parent;
@dynamic languageCode;
@dynamic pageSize;
@dynamic pageToken;

typedef struct DFListEntityTypesRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *parent;
  NSString *languageCode;
  NSString *pageToken;
} DFListEntityTypesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFListEntityTypesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListEntityTypesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFListEntityTypesRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFListEntityTypesRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = DFListEntityTypesRequest_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFListEntityTypesRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListEntityTypesRequest_FieldNumber_PageToken,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DFListEntityTypesRequest__storage_, pageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListEntityTypesRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListEntityTypesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFListEntityTypesResponse

@implementation DFListEntityTypesResponse

@dynamic entityTypesArray, entityTypesArray_Count;
@dynamic nextPageToken;

typedef struct DFListEntityTypesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entityTypesArray;
  NSString *nextPageToken;
} DFListEntityTypesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entityTypesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType),
        .number = DFListEntityTypesResponse_FieldNumber_EntityTypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFListEntityTypesResponse__storage_, entityTypesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListEntityTypesResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListEntityTypesResponse__storage_, nextPageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListEntityTypesResponse class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListEntityTypesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFGetEntityTypeRequest

@implementation DFGetEntityTypeRequest

@dynamic name;
@dynamic languageCode;

typedef struct DFGetEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *languageCode;
} DFGetEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFGetEntityTypeRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFGetEntityTypeRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFGetEntityTypeRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFGetEntityTypeRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFGetEntityTypeRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFGetEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFCreateEntityTypeRequest

@implementation DFCreateEntityTypeRequest

@dynamic parent;
@dynamic hasEntityType, entityType;
@dynamic languageCode;

typedef struct DFCreateEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  DFEntityType *entityType;
  NSString *languageCode;
} DFCreateEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFCreateEntityTypeRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFCreateEntityTypeRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityType",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType),
        .number = DFCreateEntityTypeRequest_FieldNumber_EntityType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFCreateEntityTypeRequest__storage_, entityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFCreateEntityTypeRequest_FieldNumber_LanguageCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFCreateEntityTypeRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFCreateEntityTypeRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFCreateEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFUpdateEntityTypeRequest

@implementation DFUpdateEntityTypeRequest

@dynamic hasEntityType, entityType;
@dynamic languageCode;
@dynamic hasUpdateMask, updateMask;

typedef struct DFUpdateEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  DFEntityType *entityType;
  NSString *languageCode;
  GPBFieldMask *updateMask;
} DFUpdateEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entityType",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType),
        .number = DFUpdateEntityTypeRequest_FieldNumber_EntityType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFUpdateEntityTypeRequest__storage_, entityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFUpdateEntityTypeRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFUpdateEntityTypeRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = DFUpdateEntityTypeRequest_FieldNumber_UpdateMask,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFUpdateEntityTypeRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFUpdateEntityTypeRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFUpdateEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFDeleteEntityTypeRequest

@implementation DFDeleteEntityTypeRequest

@dynamic name;

typedef struct DFDeleteEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DFDeleteEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFDeleteEntityTypeRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFDeleteEntityTypeRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFDeleteEntityTypeRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFDeleteEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchUpdateEntityTypesRequest

@implementation DFBatchUpdateEntityTypesRequest

@dynamic entityTypeBatchOneOfCase;
@dynamic parent;
@dynamic entityTypeBatchUri;
@dynamic entityTypeBatchInline;
@dynamic languageCode;
@dynamic hasUpdateMask, updateMask;

typedef struct DFBatchUpdateEntityTypesRequest__storage_ {
  uint32_t _has_storage_[2];
  NSString *parent;
  NSString *entityTypeBatchUri;
  DFEntityTypeBatch *entityTypeBatchInline;
  NSString *languageCode;
  GPBFieldMask *updateMask;
} DFBatchUpdateEntityTypesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateEntityTypesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntityTypesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityTypeBatchUri",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateEntityTypesRequest_FieldNumber_EntityTypeBatchUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntityTypesRequest__storage_, entityTypeBatchUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityTypeBatchInline",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityTypeBatch),
        .number = DFBatchUpdateEntityTypesRequest_FieldNumber_EntityTypeBatchInline,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntityTypesRequest__storage_, entityTypeBatchInline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateEntityTypesRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntityTypesRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = DFBatchUpdateEntityTypesRequest_FieldNumber_UpdateMask,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntityTypesRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchUpdateEntityTypesRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchUpdateEntityTypesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "entityTypeBatch",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DFBatchUpdateEntityTypesRequest_ClearEntityTypeBatchOneOfCase(DFBatchUpdateEntityTypesRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DFBatchUpdateEntityTypesResponse

@implementation DFBatchUpdateEntityTypesResponse

@dynamic entityTypesArray, entityTypesArray_Count;

typedef struct DFBatchUpdateEntityTypesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entityTypesArray;
} DFBatchUpdateEntityTypesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entityTypesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType),
        .number = DFBatchUpdateEntityTypesResponse_FieldNumber_EntityTypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntityTypesResponse__storage_, entityTypesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchUpdateEntityTypesResponse class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchUpdateEntityTypesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchDeleteEntityTypesRequest

@implementation DFBatchDeleteEntityTypesRequest

@dynamic parent;
@dynamic entityTypeNamesArray, entityTypeNamesArray_Count;

typedef struct DFBatchDeleteEntityTypesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSMutableArray *entityTypeNamesArray;
} DFBatchDeleteEntityTypesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchDeleteEntityTypesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchDeleteEntityTypesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityTypeNamesArray",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchDeleteEntityTypesRequest_FieldNumber_EntityTypeNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchDeleteEntityTypesRequest__storage_, entityTypeNamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchDeleteEntityTypesRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchDeleteEntityTypesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchCreateEntitiesRequest

@implementation DFBatchCreateEntitiesRequest

@dynamic parent;
@dynamic entitiesArray, entitiesArray_Count;
@dynamic languageCode;

typedef struct DFBatchCreateEntitiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSMutableArray *entitiesArray;
  NSString *languageCode;
} DFBatchCreateEntitiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchCreateEntitiesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchCreateEntitiesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType_Entity),
        .number = DFBatchCreateEntitiesRequest_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchCreateEntitiesRequest__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchCreateEntitiesRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFBatchCreateEntitiesRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchCreateEntitiesRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchCreateEntitiesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchUpdateEntitiesRequest

@implementation DFBatchUpdateEntitiesRequest

@dynamic parent;
@dynamic entitiesArray, entitiesArray_Count;
@dynamic languageCode;
@dynamic hasUpdateMask, updateMask;

typedef struct DFBatchUpdateEntitiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSMutableArray *entitiesArray;
  NSString *languageCode;
  GPBFieldMask *updateMask;
} DFBatchUpdateEntitiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateEntitiesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntitiesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType_Entity),
        .number = DFBatchUpdateEntitiesRequest_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntitiesRequest__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchUpdateEntitiesRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntitiesRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = DFBatchUpdateEntitiesRequest_FieldNumber_UpdateMask,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFBatchUpdateEntitiesRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchUpdateEntitiesRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchUpdateEntitiesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFBatchDeleteEntitiesRequest

@implementation DFBatchDeleteEntitiesRequest

@dynamic parent;
@dynamic entityValuesArray, entityValuesArray_Count;
@dynamic languageCode;

typedef struct DFBatchDeleteEntitiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSMutableArray *entityValuesArray;
  NSString *languageCode;
} DFBatchDeleteEntitiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchDeleteEntitiesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFBatchDeleteEntitiesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityValuesArray",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchDeleteEntitiesRequest_FieldNumber_EntityValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFBatchDeleteEntitiesRequest__storage_, entityValuesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DFBatchDeleteEntitiesRequest_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFBatchDeleteEntitiesRequest__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFBatchDeleteEntitiesRequest class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFBatchDeleteEntitiesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFEntityTypeBatch

@implementation DFEntityTypeBatch

@dynamic entityTypesArray, entityTypesArray_Count;

typedef struct DFEntityTypeBatch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entityTypesArray;
} DFEntityTypeBatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entityTypesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType),
        .number = DFEntityTypeBatch_FieldNumber_EntityTypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFEntityTypeBatch__storage_, entityTypesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFEntityTypeBatch class]
                                     rootClass:[DFEntityTypeRoot class]
                                          file:DFEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFEntityTypeBatch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

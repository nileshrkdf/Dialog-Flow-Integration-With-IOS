// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dialogflow/v2beta1/session_entity_type.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <googleapis/SessionEntityType.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/EntityType.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DFSessionEntityTypeRoot

@implementation DFSessionEntityTypeRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DFSessionEntityTypeRoot_FileDescriptor

static GPBFileDescriptor *DFSessionEntityTypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.dialogflow.v2beta1"
                                                 objcPrefix:@"DF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DFSessionEntityType

@implementation DFSessionEntityType

@dynamic name;
@dynamic entityOverrideMode;
@dynamic entitiesArray, entitiesArray_Count;

typedef struct DFSessionEntityType__storage_ {
  uint32_t _has_storage_[1];
  DFSessionEntityType_EntityOverrideMode entityOverrideMode;
  NSString *name;
  NSMutableArray *entitiesArray;
} DFSessionEntityType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFSessionEntityType_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFSessionEntityType__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entityOverrideMode",
        .dataTypeSpecific.enumDescFunc = DFSessionEntityType_EntityOverrideMode_EnumDescriptor,
        .number = DFSessionEntityType_FieldNumber_EntityOverrideMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFSessionEntityType__storage_, entityOverrideMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "entitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFEntityType_Entity),
        .number = DFSessionEntityType_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFSessionEntityType__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFSessionEntityType class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFSessionEntityType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DFSessionEntityType_EntityOverrideMode_RawValue(DFSessionEntityType *message) {
  GPBDescriptor *descriptor = [DFSessionEntityType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFSessionEntityType_FieldNumber_EntityOverrideMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetDFSessionEntityType_EntityOverrideMode_RawValue(DFSessionEntityType *message, int32_t value) {
  GPBDescriptor *descriptor = [DFSessionEntityType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DFSessionEntityType_FieldNumber_EntityOverrideMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DFSessionEntityType_EntityOverrideMode

GPBEnumDescriptor *DFSessionEntityType_EntityOverrideMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EntityOverrideModeUnspecified\000EntityOver"
        "rideModeOverride\000EntityOverrideModeSuppl"
        "ement\000";
    static const int32_t values[] = {
        DFSessionEntityType_EntityOverrideMode_EntityOverrideModeUnspecified,
        DFSessionEntityType_EntityOverrideMode_EntityOverrideModeOverride,
        DFSessionEntityType_EntityOverrideMode_EntityOverrideModeSupplement,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DFSessionEntityType_EntityOverrideMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DFSessionEntityType_EntityOverrideMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DFSessionEntityType_EntityOverrideMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case DFSessionEntityType_EntityOverrideMode_EntityOverrideModeUnspecified:
    case DFSessionEntityType_EntityOverrideMode_EntityOverrideModeOverride:
    case DFSessionEntityType_EntityOverrideMode_EntityOverrideModeSupplement:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DFListSessionEntityTypesRequest

@implementation DFListSessionEntityTypesRequest

@dynamic parent;
@dynamic pageSize;
@dynamic pageToken;

typedef struct DFListSessionEntityTypesRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *parent;
  NSString *pageToken;
} DFListSessionEntityTypesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFListSessionEntityTypesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListSessionEntityTypesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = DFListSessionEntityTypesRequest_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFListSessionEntityTypesRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListSessionEntityTypesRequest_FieldNumber_PageToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DFListSessionEntityTypesRequest__storage_, pageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListSessionEntityTypesRequest class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListSessionEntityTypesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFListSessionEntityTypesResponse

@implementation DFListSessionEntityTypesResponse

@dynamic sessionEntityTypesArray, sessionEntityTypesArray_Count;
@dynamic nextPageToken;

typedef struct DFListSessionEntityTypesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sessionEntityTypesArray;
  NSString *nextPageToken;
} DFListSessionEntityTypesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionEntityTypesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DFSessionEntityType),
        .number = DFListSessionEntityTypesResponse_FieldNumber_SessionEntityTypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DFListSessionEntityTypesResponse__storage_, sessionEntityTypesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = DFListSessionEntityTypesResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFListSessionEntityTypesResponse__storage_, nextPageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFListSessionEntityTypesResponse class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFListSessionEntityTypesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFGetSessionEntityTypeRequest

@implementation DFGetSessionEntityTypeRequest

@dynamic name;

typedef struct DFGetSessionEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DFGetSessionEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFGetSessionEntityTypeRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFGetSessionEntityTypeRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFGetSessionEntityTypeRequest class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFGetSessionEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFCreateSessionEntityTypeRequest

@implementation DFCreateSessionEntityTypeRequest

@dynamic parent;
@dynamic hasSessionEntityType, sessionEntityType;

typedef struct DFCreateSessionEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  DFSessionEntityType *sessionEntityType;
} DFCreateSessionEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DFCreateSessionEntityTypeRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFCreateSessionEntityTypeRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionEntityType",
        .dataTypeSpecific.className = GPBStringifySymbol(DFSessionEntityType),
        .number = DFCreateSessionEntityTypeRequest_FieldNumber_SessionEntityType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFCreateSessionEntityTypeRequest__storage_, sessionEntityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFCreateSessionEntityTypeRequest class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFCreateSessionEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFUpdateSessionEntityTypeRequest

@implementation DFUpdateSessionEntityTypeRequest

@dynamic hasSessionEntityType, sessionEntityType;
@dynamic hasUpdateMask, updateMask;

typedef struct DFUpdateSessionEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  DFSessionEntityType *sessionEntityType;
  GPBFieldMask *updateMask;
} DFUpdateSessionEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionEntityType",
        .dataTypeSpecific.className = GPBStringifySymbol(DFSessionEntityType),
        .number = DFUpdateSessionEntityTypeRequest_FieldNumber_SessionEntityType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFUpdateSessionEntityTypeRequest__storage_, sessionEntityType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMask",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFieldMask),
        .number = DFUpdateSessionEntityTypeRequest_FieldNumber_UpdateMask,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DFUpdateSessionEntityTypeRequest__storage_, updateMask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFUpdateSessionEntityTypeRequest class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFUpdateSessionEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DFDeleteSessionEntityTypeRequest

@implementation DFDeleteSessionEntityTypeRequest

@dynamic name;

typedef struct DFDeleteSessionEntityTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DFDeleteSessionEntityTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DFDeleteSessionEntityTypeRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DFDeleteSessionEntityTypeRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DFDeleteSessionEntityTypeRequest class]
                                     rootClass:[DFSessionEntityTypeRoot class]
                                          file:DFSessionEntityTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DFDeleteSessionEntityTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
